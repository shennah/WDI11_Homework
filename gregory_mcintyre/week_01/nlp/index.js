// Generated by CoffeeScript 1.8.0
var arr, debounce;

arr = ["./libs/underscore.js", "./libs/jquery.js", "./libs/oj.js", "./libs/nlp.js", "./libs/freebase.min.js"];
head.js.apply(this, arr);

debounce = function(fn, debounceDuration) {
  debounceDuration = debounceDuration || 100;
  return function() {
    var args;
    if (!fn.debouncing) {
      args = Array.prototype.slice.apply(arguments);
      fn.lastReturnVal = fn.apply(window, args);
      fn.debouncing = true;
    }
    clearTimeout(fn.debounceTimeout);
    fn.debounceTimeout = setTimeout((function() {
      fn.debouncing = false;
    }), debounceDuration);
    return fn.lastReturnVal;
  };
};

head(function() {
  var colours, key, set_text, show_topic;
  oj.useGlobally();
  window.freebase = $.freebase;

  colours = {
    noun: "steelblue",
    verb: "olivedrab",
    adjective: "coral",
    adverb: "rosybrown",
    glue: "grey"
  };

  key = "AIzaSyD5GmnQC7oW9GJIWPGsJUojspMMuPusAxI";
  set_text = function(tokens, el) {
    var ojarr;
    if (tokens == null) {
      tokens = [];
    }
    ojarr = span(function() {
      return tokens.map(function(t) {
        if (t.pos.parent === "noun") {
          return span({
            style: " color:" + colours[t.pos.parent],
          }, function() {
            span({
              style: ""
            }, function() {
              return " " + t.text + " ";
            });
          });
        } else if (t.pos.parent === "verb") {
          span({
            style: " color:" + colours[t.pos.parent] + ";"
          }, function() {});

          return span({
            style: " color:" + colours[t.pos.parent] + ";",
          }, function() {
            span(function() {
              return " " + t.text + " ";
            });
          });
        } else if (t.pos.parent === "adverb") {
          return span({
            style: " color:" + colours[t.pos.parent] + ";"
          }, function() {
            return span(function() {
              return t.text + " ";
            });
          });
        } else {
          return span({
            style: " color:" + colours[t.pos.parent] + ";"
          }, function() {
            return span(function() {
              return t.text + " ";
            });
          });
        }
      });
    });
    return el.oj(ojarr);
  };
  $("#input").oj(
      textarea({
        id: "text",
        class: "text",
        //style: "padding:10px; border:1px solid lightsteelblue; color:steelblue; overflow-x: visible; font-size:30px; width:600px;",
        placeholder: "text",
        //contentEditable: "true",
        keyup: debounce(function() {
          var done, el, tokens, txt;
          el = $("#text");
          txt = el.val();
          console.log(txt);
          done = nlp.pos(txt).sentences;
          var allTokens = [];
          for (var i = 0; i < done.length; i++) {
            var tokens = done[i].tokens;
            allTokens = allTokens.concat(tokens);
          }
          console.log(allTokens);
          return set_text(allTokens, $('#output'));
        }, 10)
    })
  );
  return $("#text").keyup();
});

